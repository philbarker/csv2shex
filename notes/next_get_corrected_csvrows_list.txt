"""Use list of dictionaries to initialize list of CSVRow objects."""

# @pytest.mark.skip
# def test_liststatements():
#     """Turn list of CSV rows (as dicts) into list of corrected CSV rows."""
#     csvrows_list = [
#         {"shapeID": ":a", "propertyID": "dct:creator", "valueNodeType": "URI"},
#         {"shapeID": ":a", "propertyID": "dct:subject", "valueNodeType": "URI"},
#         {"shapeID": ":a", "propertyID": "dct:date", "valueNodeType": "String"},
#         {"shapeID": ":b", "propertyID": "foaf:name", "valueNodeType": "String"},
#     ]
#     corrected_csvrows_list = [
#         {"shapeID": ":a", "propertyID": "dct:creator", "valueNodeType": "URI"},
#         {"shapeID": ":a", "propertyID": "dct:subject", "valueNodeType": "URI"},
#         {"shapeID": ":a", "propertyID": "dct:date", "valueNodeType": "String"},
#         {"shapeID": ":b", "propertyID": "foaf:name", "valueNodeType": "String"},
#     ]
#     expected_output_list = [dict(DEFAULTS, **item) for item in corrected_csvrows_list]
#     assert _get_corrected_csvrows_list(csvrows_list) == expected_output_list
#
#
# @pytest.mark.skip
# def test_liststatements_without_shapeIDs():
#     """Not shape IDs specified, so shape is ':default'."""
#     csvrows_list = [
#         {"propertyID": "dct:creator"},
#         {"propertyID": "dct:subject"},
#         {"propertyID": "dct:date"},
#     ]
#     corrected_csvrows_list = [
#         {"shapeID": ":default", "propertyID": "dct:creator"},
#         {"shapeID": ":default", "propertyID": "dct:subject"},
#         {"shapeID": ":default", "propertyID": "dct:date"},
#     ]
#     expected_output_list = [dict(DEFAULTS, **item) for item in corrected_csvrows_list]
#     assert _get_corrected_csvrows_list(csvrows_list) == expected_output_list
#
#
# @pytest.mark.skip
# def test_liststatements_with_shapeIDs_specified_as_none():
#     """Shape IDs specified as 'None', so shape is ':default'."""
#     csvrows_list = [
#         {"shapeID": None, "propertyID": "dct:creator"},
#         {"shapeID": None, "propertyID": "dct:subject"},
#         {"shapeID": None, "propertyID": "dct:date"},
#     ]
#     corrected_csvrows_list = [
#         {"shapeID": ":default", "propertyID": "dct:creator"},
#         {"shapeID": ":default", "propertyID": "dct:subject"},
#         {"shapeID": ":default", "propertyID": "dct:date"},
#     ]
#     expected_output_list = [dict(DEFAULTS, **item) for item in corrected_csvrows_list]
#     assert _get_corrected_csvrows_list(csvrows_list) == expected_output_list
#
#
# @pytest.mark.skip
# def test_liststatements_with_shape_in_first_statement_only():
#     """If shape IDs used previously, used for subsequent statements if no Shape ID."""
#     csvrows_list = [
#         {"shapeID": ":a", "propertyID": "dct:creator"},
#         {"shapeID": None, "propertyID": "dct:subject"},
#         {"shapeID": None, "propertyID": "dct:date"},
#     ]
#     corrected_csvrows_list = [
#         {"shapeID": ":a", "propertyID": "dct:creator"},
#         {"shapeID": ":a", "propertyID": "dct:subject"},
#         {"shapeID": ":a", "propertyID": "dct:date"},
#     ]
#     expected_output_list = [dict(DEFAULTS, **item) for item in corrected_csvrows_list]
#     assert _get_corrected_csvrows_list(csvrows_list) == expected_output_list
#
#
# @pytest.mark.skip
# def test_liststatements_with_shape_on_its_own_line():
#     """If shape IDs used previously, used for subsequent statements if no Shape ID."""
#     csvrows_list = [
#         {"shapeID": ":a", "propertyID": None, "valueNodeType": None},
#         {"shapeID": None, "propertyID": "dct:creator", "valueNodeType": "URI"},
#         {"shapeID": None, "propertyID": "dct:subject", "valueNodeType": "URI"},
#     ]
#     corrected_csvrows_list = [
#         {"shapeID": ":a", "propertyID": "dct:creator", "valueNodeType": "URI"},
#         {"shapeID": ":a", "propertyID": "dct:subject", "valueNodeType": "URI"},
#     ]
#     expected_output_list = [dict(DEFAULTS, **item) for item in corrected_csvrows_list]
#     assert _get_corrected_csvrows_list(csvrows_list) == expected_output_list
