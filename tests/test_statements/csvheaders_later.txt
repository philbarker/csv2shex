@pytest.mark.skip
def test_normalize_csvheaders3():
    """@@@Docstring."""
    input = [
        {"shapeID": ":a", "propertyID": "dct:creator", "value_type": "URI"},
        {"shapeID": ":a", "propertyID": "dct:subject", "value_type": "URI"},
        {"shapeID": ":a", "propertyID": "dct:date", "value_type": "String"},
    ]
    assert False


@pytest.mark.skip
def test_normalize_csvheaders4():
    """@@@Docstring."""
    expected_output = [
        {
            "shapeID": ":a",
            "shapeLabel": "Book",
            "propertyID": "dct:creator",
            "propertyLabel": "Creator",
            "mandatory": "Y",
            "repeatable": "N",
            "value_type": "URI",
            "valueDataType": "",
            "constraint_value": "",
            "constraint_type": "",
            "shape_ref": ":b",
            "annot": "Typically the author.",
        },
        {
            "shapeID": ":a",
            "shapeLabel": "Book",
            "propertyID": "dct:date",
            "propertyLabel": "Date",
            "mandatory": "Y",
            "repeatable": "N",
            "value_type": "String",
            "valueDataType": "xsd:string",
            "constraint_value": "(\d+/\d+/\d+)",
            "constraint_type": "Regex",
            "shape_ref": "",
            "annot": "",
        },
        {
            "shapeID": ":b",
            "shapeLabel": "Person",
            "propertyID": "foaf:name",
            "propertyLabel": "Name",
            "mandatory": "Y",
            "repeatable": "N",
            "value_type": "String",
            "valueDataType": "xsd:string",
            "constraint_value": "",
            "constraint_type": "",
            "shape_ref": "",
            "annot": "",
        },
    ]
    assert False
